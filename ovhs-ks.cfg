#version=RHEL9

# https://docs.centos.org/en-US/centos/install-guide/Kickstart2/

# System authorization information
authselect --enableshadow --passalgo=sha512

# Use graphical install
#graphical
# Perform kickstart installation in text mode
text

# Use CDROM / network installation media
# when using http://isoredirect.centos.org/centos/8-stream/isos/x86_64/CentOS-Stream-8-x86_64-latest-dvd1.iso:
#cdrom
# when using http://isoredirect.centos.org/centos/8/isos/x86_64/CentOS-8.5.2111-x86_64-boot.iso:
#url --mirrorlist="http://mirrorlist.centos.org/?release=$releasever&arch=x86_64&repo=BaseOS&infra=$infra"
# when using http://isoredirect.centos.org/centos/8-stream/isos/x86_64/CentOS-Stream-8-x86_64-latest-boot.iso:
url --mirrorlist="http://mirrorlist.centos.org/?release=$releasever-stream&arch=$basearch&repo=BaseOS&infra=$infra"

# disable kdump for testing purposes
# %addon com_redhat_kdump --enable
%addon com_redhat_kdump --disable
%end

# Run the Setup Agent on first boot
firstboot --enable

# Do not configure the X Window System
skipx

# Keyboard layouts
#keyboard --vckeymap=de --xlayouts='de (nodeadkeys)'
# Keyboard layouts
keyboard --xlayouts='de (nodeadkeys)'

# System language
#lang de_DE.UTF-8
lang en_US.UTF-8

# Network information
network  --bootproto=dhcp --onboot=on --ipv6=auto --activate
#network  --bootproto=dhcp --device=enp3s0 --ipv6=auto --activate
#network  --bootproto=dhcp --device=enp4s1 --ipv6=auto
network --hostname=ovhs

# Root password
# you can use "python -c 'import crypt; print(crypt.crypt("My Password", crypt.mksalt()))'" to create the hash on a linux command line
# the below example reflects the password "ovhs"
rootpw --iscrypted $6$4DVXePa2eKw4pukd$eS1jWHtxhROlAn0TWrzTirngzT4JHin6eFk1YQGBDGTVy3yG610bMyqoUgNTI6h.btAtrqcz4nt6Zu6qKs97r1
#  --allow-ssh
#  --lock

# add user ovhs
user --name=ovhs --gecos="OVHS system user" --groups="wheel" --iscrypted --password="$6$4DVXePa2eKw4pukd$eS1jWHtxhROlAn0TWrzTirngzT4JHin6eFk1YQGBDGTVy3yG610bMyqoUgNTI6h.btAtrqcz4nt6Zu6qKs97r1"

# Firewall
firewall --enabled --port=53

# System services
services --enabled="chronyd,systemd-resolved"

# System timezone
#timezone Europe/Berlin --utc --ntpserver 0.de.pool.ntp.org --ntpserver 1.de.pool.ntp.org --ntpserver 2.de.pool.ntp.org --ntpserver 3.de.pool.ntp.org

timesource --ntp-server=0.de.pool.ntp.org
# System timezone
timezone Europe/Berlin --utc

ignoredisk --only-use=sda,sdb,sdc
# Partition clearing information
clearpart --none --initlabel
### Disk partitioning information
# OS disk
part /boot/efi --fstype="efi"   --ondisk=/dev/disk/by-id/scsi-SATA_Samsung_SSD_860_S4XBNJ0N604366Y --asprimary --size=1024 --fsoptions="umask=0077,shortname=winnt"
part /boot     --fstype="ext4"  --ondisk=/dev/disk/by-id/scsi-SATA_Samsung_SSD_860_S4XBNJ0N604366Y --asprimary --size=4096
part pv.1001   --fstype="lvmpv" --ondisk=/dev/disk/by-id/scsi-SATA_Samsung_SSD_860_S4XBNJ0N604366Y --asprimary --size=204806 --encrypted --luks-version=luks2
part pv.1002   --fstype="lvmpv" --ondisk=/dev/disk/by-id/scsi-SATA_Samsung_SSD_860_S4XBNJ0N604366Y --asprimary --size=267013
# mirrored data disks
part raid.0001 --fstype="mdmember" --ondisk=/dev/disk/by-id/scsi-SATA_TOSHIBA_HDWN180_X9I5K14AFAVG --size=100000 --grow
part raid.0002 --fstype="mdmember" --ondisk=/dev/disk/by-id/scsi-SATA_TOSHIBA_HDWN180_X9I5K14BFAVG --size=100000 --grow
raid pv.0012 --device=luks-pv00 --fstype="lvmpv" --level=RAID1 raid.0001 raid.0002

### Logical Volume information:
volgroup ovhs_os --pesize=4096 pv.1001 --reserved-percent=20
# add cache pv to data volume group
#volgroup ovhs_cache --pesize=4096 pv.1002
volgroup ovhs_data --pesize=4096 pv.0012 pv.1002
# create thick volumes:
logvol swap           --vgname=ovhs_os --fstype="swap" --size=16097 --name=swap
logvol /              --vgname=ovhs_os --fstype="ext4" --size=71680 --name=root
logvol /var           --vgname=ovhs_os --fstype="ext4" --size=20000 --name=var
logvol /var/crash     --vgname=ovhs_os --fstype="ext4" --size=10000 --name=var_crash
logvol /var/log       --vgname=ovhs_os --fstype="ext4" --size=8000  --name=var_log
logvol /var/log/audit --vgname=ovhs_os --fstype="ext4" --size=2000  --name=var_audit
logvol /home          --vgname=ovhs_os --fstype="ext4" --size=10000 --name=home
logvol /tmp           --vgname=ovhs_os --fstype="ext4" --size=2000  --name=tmp
logvol /data          --vgname=ovhs_data --fstype="ext4" --size=102400 --encrypted --luks-version=luks2 --name=data --cachepvs=pv.1002 --cachemode=writeback
# --cachesize=

# Base Software installation:
%packages
@base
@core
#@network-file-system-client
#@container-management
#@headless-management
#@remote-system-management

# standard selection for server:
@^server-product-environment
#@system-tools
@^virtualization-host-environment
#@virtualization-hypervisor
@virtualization-platform
#@virtualization-tools
@container-management
#bind-utils
chrony
#cockpit-machines
cockpit
cockpit-bridge
cockpit-system
cockpit-ws
#deltarpm
#screen
#nfs-utils
#system-storage-manager
#ctdb
#git
#vim

%end
###

# self-hosted engine setup with gluster storage taken from
# https://www.ovirt.org/documentation/gluster-hyperconverged/chap-Single_node_hyperconverged.html
# http://community.redhat.com/blog/2014/10/up-and-running-with-ovirt-3-5/ and
# http://community.redhat.com/blog/2014/11/up-and-running-with-ovirt-3-5-part-two/
%post 
# multipathd throws ugly errors, thus we blacklist the harddisks
#cat >> /etc/multipath.conf <<EOF
#
#blacklist {
#       devnode "^sd[a-b]"
#}
#EOF

# configure nested virtualization for the host
#grep -i "^model.*intel" /proc/cpuinfo && /usr/bin/sed -i "s/^#\(options kvm_intel nested=1.*\)/\1/" /etc/modprobe.d/kvm.conf
#grep -i "^model.*amd" /proc/cpuinfo && /usr/bin/sed -i "s/^#\(options kvm_amd nested=1.*\)/\1/" /etc/modprobe.d/kvm.conf

# update installation
#yum -y install epel-release
#/bin/yum -y install http://resources.ovirt.org/pub/yum-repo/ovirt-release-master.rpm
#/bin/yum -y install http://resources.ovirt.org/pub/yum-repo/ovirt-release43.rpm
#/bin/yum -y install gdeploy cockpit-ovirt-dashboard vdsm-gluster ovirt-engine-appliance #ansible git
#/bin/yum -y update
systemctl enable cockpit.socket
%end
###

# copy CentOS install ISO image to /home/tmp/ for later re-use
%post --nochroot
mkdir -p /mnt/sysimage/home/tmp
dd if=$(df | grep "/run/install" | head -n1 | cut -d" " -f1) of=/mnt/sysimage/home/tmp/$(blkid -o value $(df | grep "/run/install" | head -n1 | cut -d" " -f1) | grep -i CentOS).iso bs=4M
%end

# automatically start oVirtHomeServer installation via ansible (deactivated, just download setup script)
%post
/bin/yum -y install epel-release
/bin/yum -y install ansible
#ansible-pull -U https://github.com/joschro/ovhs.git
/bin/curl -o /home/ovhs/run-ovhs_ansible_install.sh https://raw.githubusercontent.com/joschro/ovhs/master/run-ovhs_ansible_install.sh
chown ovhs:ovhs /home/ovhs/run-ovhs_ansible_install.sh
%end

reboot
